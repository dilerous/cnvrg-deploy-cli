---
clusterDomain: {{ .ClusterDomain.ClusterDomain }}

{{- if ne .ClusterInteralDomain.Domain "cluster.local" }}
clusterInternalDomain: {{ .ClusterInteralDomain.Domain }}
{{- end }}

{{- if ne .ClusterDomain.ImageHub ""}}
imageHub: {{ .ClusterDomain.ImageHub }}
{{- end }}

{{- if ne .Labels.Stringify ""}} 
labels:{ {{ .Labels.Stringify }} }
{{- end }}

{{- if ne .Annotations.Stringify ""}} 
annotations:{ {{ .Annotations.Stringify }} }
{{- end }}

{{- if .Network.Https.Enabled }}
networking:
  https:
    enabled: {{ .Network.Https.Enabled }}
    certSecret: {{ .Network.Https.CertSecret }}
{{- end }}

{{- if .Network.Proxy.Enabled }}
  proxy:
    enabled: {{ .Network.Proxy.Enabled }}
    httpProxy:[ {{ .Network.Proxy.HttpProxy }} ]
    httpsProxy:[ {{ .Network.Proxy.HttpsProxy }} ]
    noProxy:[ {{ .Network.Proxy.NoProxy }} ]
{{- end }}

{{- if .Network.Ingress.External }}
  ingress:
    type: {{ .Network.Ingress.Type }}
    istioGwEnabled: {{ .Network.Ingress.IstioGwEnabled }} 
    istioGwName: {{ .Network.Ingress.IstioGwName }} 
{{- end }}

{{- if eq .Network.Istio.Enabled false }}
  istio:
    enabled: {{ .Network.Istio.Enabled }}
    externalIp: [ {{ .Network.Istio.ExternalIp }} ]
    ingressSvcAnnotations: { {{ .Network.Istio.IngressSvcAnnotations }} }
    ingressSvcExtraPorts: [ {{ .Network.Istio.IngressSvcExtraPorts }} ]
    lbSourceRanges: [ {{ .Network.Istio.LbSourceRanges }} ]
{{- end }}

{{- if or (not .Logging.FluentbitEnable) (not .Logging.ElastalertEnable) (not .Logging.KibanaEnable)
(.Logging.ElastaStorageSize) (.Logging.ElastaStorageClass) (.Logging.ElastaNodeSelector) (.Logging.KibanaSvcName) }}
logging:
{{- end }}

{{- if eq .Logging.FluentbitEnable false }}
  fluentbit:
    enabled: {{ .Logging.FluentbitEnable }}
{{- end}}

{{- if or (eq .Logging.ElastalertEnable false) (.Logging.ElastaStorageSize) (.Logging.ElastaStorageClass) (.Logging.ElastaNodeSelector) }}
  elastalert:
    enabled: {{ .Logging.ElastalertEnable }}
{{- end }}

{{- if .Logging.ElastaStorageSize }}
    storageSize: {{ .Logging.ElastaStorageSize }}
{{- end }}

{{- if (.Logging.ElastaStorageClass) }}
    storageClass: {{ .Logging.ElastaStorageClass }}
{{- end }}

{{- if (.Logging.ElastaNodeSelector) }}
    nodeSelector: { {{ .Logging.ElastaNodeSelector }} }
{{- end }}

{{- if or (eq .Logging.KibanaEnable false) (.Logging.KibanaSvcName) }}
  kibana:
    enabled: {{ .Logging.KibanaEnable }}
{{- end }}
{{- if .Logging.KibanaSvcName }}
    svcName: {{ .Logging.KibanaSvcName }}
{{- end }}

{{- if .Registry.Enabled }}
registry:
{{- end }}
{{- if .Registry.Url }}
  url: {{ .Registry.Url }}
{{- end }}
{{- if .Registry.User }}
  user: {{ .Registry.User }}
{{- end }}
{{- if .Registry.Password }}
  password: {{ .Registry.Password }}
{{- end }}

{{- if .Tenancy.Enabled }}
tenancy:
  enabled: {{ .Tenancy.Enabled }}
  key: {{ .Tenancy.Key }}
  value: {{ .Tenancy.Value }}
{{- end }}

{{- if .Sso.Enabled }}
sso:
  enabled: {{ .Sso.Enabled }}
{{- end }}
{{- if .Sso.AdminUser }}
  adminUser: {{ .Sso.AdminUser }}
{{- end }}
{{- if .Sso.Provider }}
  provider: {{ .Sso.Provider }}
{{- end }}
{{- if .Sso.EmailDomain }}
  emailDomain: [ {{ .Sso.EmailDomain }} ]
{{- end }}
{{- if .Sso.ClientId }}
  clientId: {{ .Sso.ClientId }}
{{- end }}
{{- if .Sso.ClientSecret }}
  clientSecret: {{ .Sso.ClientSecret }}
{{- end }}
{{- if .Sso.AzureTenant }}
  azureTenant: {{ .Sso.AzureTenant }}
{{- end }}
{{- if .Sso.OidcIssuerUrl }}
  oidcIssuerUrl: {{ .Sso.OidcIssuerUrl }}
{{- end }}

{{- if or (.Storage.Nfs.Enabled) (.Storage.Hostpath.Enabled) }}
storage:
  nfs:
    enabled: {{ .Storage.Nfs.Enabled }}
{{- end }}
{{- if .Storage.Nfs.Server }}
    server: {{ .Storage.Nfs.Server }}
{{- end }}
{{- if .Storage.Nfs.Path }}
    path: {{ .Storage.Nfs.Path }}
{{- end }}
{{- if .Storage.Nfs.DefaultSc }}
    defaultSc: {{ .Storage.Nfs.DefaultSc }}
{{- end }}
{{- if .Storage.Nfs.ReclaimPolicy }}
    reclaimPolicy: {{ .Storage.Nfs.ReclaimPolicy }}
{{- end }}
{{- if .Storage.Nfs.Image }}
    image: {{ .Storage.Nfs.Image }}
{{- end }}

{{- if .Storage.Hostpath.Enabled }}
  hostpath:
    enabled: {{ .Storage.Hostpath.Enabled }}
{{- end }}
{{- if .Storage.Hostpath.DefaultSc }}
    defaultSc: {{ .Storage.Hostpath.DefaultSc }}
{{- end }}
{{- if .Storage.Hostpath.Path }}
    path: {{ .Storage.Hostpath.Path }}
{{- end }}
{{- if .Storage.Hostpath.ReclaimPolicy }}
    reclaimPolicy: {{ .Storage.Hostpath.ReclaimPolicy }}
{{- end }}
{{- if .Storage.Hostpath.NodeSelector }}
    nodeSelector: {{ .Storage.Hostpath.NodeSelector }}
{{- end }}
    

{{- if or (not .Gpu.NvidiaEnable) (not .Gpu.HabanaEnable) }}
gpu:
{{- end  }}
{{- if not .Gpu.NvidiaEnable }}
  nvidiaDp:
    enabled: {{ .Gpu.NvidiaEnable }}
{{- end  }}
{{- if not .Gpu.HabanaEnable }}
  habanaDp:
    enabled: {{ .Gpu.HabanaEnable }}
{{- end }}

{{- if not .ConfigReloader.Enabled  }}
configReloader:
  enabled: {{ .ConfigReloader.Enabled }}
{{- end }}

{{- if or (not .Capsule.Enabled) (.Capsule.Image)  }}
capsule:
  enabled: {{ .Capsule.Enabled }}
{{- end }}
{{- if .Capsule.Image }}
  image: {{ .Capsule.Image }}
{{- end }}

{{- if or (not .Backup.Enabled) (.Backup.Rotation) (.Backup.Period) }}
backup:
  enabled: {{ .Backup.Enabled }}
{{- end }}
{{- if .Backup.Rotation }}
  rotation: {{ .Backup.Rotation }}
{{- end }}
{{- if .Backup.Period }}
  period: {{ .Backup.Period }}
{{- end }}


{{- if or (not .Monitoring.DcgmExportEnable) (not .Monitoring.HabanaExportEnable) (not .Monitoring.NodeExportEnable) 
(not .Monitoring.KubeStateMetricEnable) (not .Monitoring.GrafanaEnable) (not .Monitoring.PrometheusOperatorEnable) 
(not .Monitoring.PrometheusEnable) (not .Monitoring.DefaultSvcMonitorsEnable) (not .Monitoring.CnvrgIdleMetricsEnable) }}
monitoring:
{{- end }}

{{- if eq .Monitoring.DcgmExportEnable false }}
  dcgmExporter:
    enabled: {{ .Monitoring.DcgmExportEnable }}
{{- end }}

{{- if eq .Monitoring.HabanaExportEnable false }}
  habanaExporter:
    enabled: {{ .Monitoring.HabanaExportEnable }}
{{- end }}

{{- if not .Monitoring.NodeExportEnable }}
  nodeExporter:
    enabled: {{ .Monitoring.NodeExportEnable }}
{{- end }}

{{- if eq .Monitoring.KubeStateMetricEnable false }}
  kubeStateMetrics:
    enabled: {{ .Monitoring.KubeStateMetricEnable }}
{{- end }}

{{- if or (not .Monitoring.GrafanaEnable) (.Monitoring.GrafanaSvcName) }}
  grafana:
    enabled: {{ .Monitoring.GrafanaEnable }}
{{- end }}
{{- if .Monitoring.GrafanaSvcName }}
    svcName: {{ .Monitoring.GrafanaSvcName }}
{{- end }}

{{- if eq .Monitoring.PrometheusOperatorEnable false }}
  prometheusOperator:
    enabled: {{ .Monitoring.PrometheusOperatorEnable }}
{{- end }}

{{- if or (not .Monitoring.PrometheusEnable) (.Monitoring.PrometheusStorageSize) (.Monitoring.PrometheusStorageClass) (.Monitoring.PrometheusNodeSelector) }}
  prometheus:
    enabled: {{ .Monitoring.PrometheusEnable }}
{{- end }}
{{- if .Monitoring.PrometheusStorageSize }}
    storageSize: {{ .Monitoring.PrometheusStorageSize }}
{{- end }}
{{- if .Monitoring.PrometheusStorageClass }}
    storageClass: {{ .Monitoring.PrometheusStorageClass }}
{{- end }}
{{- if .Monitoring.PrometheusNodeSelector }}
    nodeSelector: { {{ .Monitoring.PrometheusNodeSelector }} }
{{- end }}

{{- if eq .Monitoring.DefaultSvcMonitorsEnable false }}
  defaultServiceMonitors:
    enabled: {{ .Monitoring.DefaultSvcMonitorsEnable }}
{{- end }}

{{- if eq .Monitoring.CnvrgIdleMetricsEnable false }}
  cnvrgIdleMetricsExporter:
    enabled: {{ .Monitoring.CnvrgIdleMetricsEnable }}
{{- end }}
{{- if .Monitoring.CnvrgIdleMetricsLabels }}
    labels: { {{ .Monitoring.CnvrgIdleMetricsLabels }} }
{{- end }}

{{- if or (.Dbs.CvatEnable) (not .Dbs.EsEnable) }}
dbs:
{{- end }}
{{- if .Dbs.CvatEnable }}
  cvat:
    enabled: {{ .Dbs.CvatEnable }}
{{- end }}

{{- if or (eq .Dbs.EsEnable false) (.Dbs.EsStorageSize) (.Dbs.EsPatchNodes) (.Dbs.EsNodeSelector) }}
  es:
    enabled: {{ .Dbs.EsEnable }}
{{- end }}
{{- if .Dbs.EsStorageSize }}
    storageSize: {{ .Dbs.EsStorageSize }}
{{- end }}
{{- if .Dbs.EsStorageClass }}
    storageClass: {{ .Dbs.EsStorageClass }}
{{- end }}
{{- if .Dbs.EsPatchNodes }}
    patchEsNodes: {{ .Dbs.EsPatchNodes }}
{{- end }}
{{- if .Dbs.EsNodeSelector }}
    nodeSelector: { {{ .Dbs.EsNodeSelector }} }
{{- end }}
{{- if or (.Dbs.CleanUpAll) (.Dbs.CleanUpApp) (.Dbs.CleanUpJobs) (.Dbs.CleanUpEndpoints) }}
    cleanupPolicy:
      all: {{ .Dbs.CleanUpAll }}
      app: {{ .Dbs.CleanUpApp }}
      jobs: {{ .Dbs.CleanUpJobs }}
      endpoints: {{ .Dbs.CleanUpEndpoints }} 
{{- end }}

{{- if or (not .Dbs.MinioEnable) (.Dbs.MinioStorageSize) (.Dbs.MinioStorageClass) (.Dbs.MinioNodeSelector) }} 
  minio:
    enabled: {{ .Dbs.MinioEnable }}
{{- end }}
{{- if .Dbs.MinioStorageSize }}
    storageSize: {{ .Dbs.MinioStorageSize }}
{{- end }}
{{- if .Dbs.MinioStorageClass }}
    storageClass: {{ .Dbs.MinioStorageClass }}
{{- end }}
{{- if .Dbs.MinioNodeSelector }}
    nodeSelector: { {{ .Dbs.MinioNodeSelector }} }
{{- end }}

{{- if or (not .Dbs.PgEnable) (.Dbs.PgStorageSize) (.Dbs.PgStorageClass) (.Dbs.PgNodeSelector) }}    
  pg:
    enabled: {{ .Dbs.PgEnable }}
{{- end }}
{{- if .Dbs.PgStorageSize }}
    storageSize: {{ .Dbs.PgStorageSize }}
{{- end }}
{{- if .Dbs.PgStorageClass }}
    storageClass: {{ .Dbs.PgStorageClass }}
{{- end }}
{{- if .Dbs.PgNodeSelector }}
    nodeSelector: { {{ .Dbs.PgNodeSelector }} }
{{- end }}
{{- if or (.Dbs.PgPagesEnable) (.Dbs.PgPagesSize) (.Dbs.PgPagesMemory) }}
    hugePages:
{{- end }}
{{- if .Dbs.PgPagesEnable }}
      enabled: {{ .Dbs.PgPagesEnable }}
{{- end }}
{{- if .Dbs.PgPagesSize }}
      size: {{ .Dbs.PgPagesSize }}
{{- end }}
{{- if .Dbs.PgPagesMemory }}
      memory: {{ .Dbs.PgPagesMemory }}
{{- end }}


{{- if or (not .Dbs.RedisEnable) (.Dbs.RedisStorageSize) (.Dbs.RedisStorageClass) (.Dbs.RedisNodeSelector) }}
  redis:
    enabled: {{ .Dbs.RedisEnable }}
{{- end }}
{{- if .Dbs.RedisStorageSize }}
    storageSize: {{ .Dbs.RedisStorageSize }}
{{- end }}
{{- if .Dbs.RedisStorageSize }}
    storageClass: {{ .Dbs.RedisStorageClass }}
{{- end }}
{{- if .Dbs.RedisStorageSize }}
    nodeSelector: {{ .Dbs.RedisNodeSelector }}
{{- end }}


{{- if .ControlPlane.Image }}
controlPlane:
  image: {{ .ControlPlane.Image }}
  baseConfig:
    agentCustomTag: {{ .ControlPlane.BaseConfigAgentTag }}
    intercom: {{ .ControlPlane.BaseConfigIntercom }}
    featureFlags: { {{ .ControlPlane.BaseConfigFeatureFlags }} }
    cnvrgPrivilegedJob: {{ .ControlPlane.BaseConfigCnvrgPrivileged }}
{{- end }}

{{- if eq .ControlPlane.HyperEnable false }}
  hyper:
    enabled: {{ .ControlPlane.HyperEnable }}
{{- end }}

{{- if eq .ControlPlane.CnvrgScheduleEnable false }}
  cnvrgScheduler:
    enabled: {{ .ControlPlane.CnvrgScheduleEnable }}
{{- end }}

{{- if .ControlPlane.CnvrgClusterProvisionerEnable }}
  cnvrgClusterProvisionerOperator:
    enabled: {{ .ControlPlane.CnvrgClusterProvisionerEnable }}
{{- end }}

{{- if .ControlPlane.ObjectStorageType }}
  objectStorage:
    type: {{ .ControlPlane.ObjectStorageType }}
    bucket: {{ .ControlPlane.ObjectStorageBucket }}
    region: {{ .ControlPlane.ObjectStorageRegion }}
    accessKey: {{ .ControlPlane.ObjectStorageAccessKey }}
    secretKey: {{ .ControlPlane.ObjectStorageSecretKey }}
    endpoint: {{ .ControlPlane.ObjectStorageEndpoint }}
    azureAccountName: {{ .ControlPlane.ObjectStorageAzureAcountName }}
    azureContainer: {{ .ControlPlane.ObjectStorageAzureContainer }}
    gcpSecretRef: {{ .ControlPlane.ObjectStorageGcpSecretRef }}
    gcpProject: {{ .ControlPlane.ObjectStorageGcpProject }}
{{- end }}

{{- if eq .ControlPlane.SearchkiqEnable false }}
  searchkiq:
    enabled: {{ .ControlPlane.SearchkiqEnable }}
{{- end }}

{{- if eq .ControlPlane.SearchkiqHpaEnable false }}
    hpa:
      enabled: {{ .ControlPlane.SearchkiqHpaEnable }}
      maxReplicas: {{ .ControlPlane.SearchkiqHpaMaxReplicas }}
{{- end }}

{{- if eq .ControlPlane.SidekiqEnable false }}
  sidekiq:
    enabled: {{ .ControlPlane.SidekiqEnable }}
    split: {{ .ControlPlane.SidekiqSplit }}
{{- end }}

{{- if eq .ControlPlane.SidekiqHpaEnable false }}
    hpa:
      enabled: {{ .ControlPlane.SidekiqHpaEnable }}
      maxReplicas: {{ .ControlPlane.SidekiqHpaMaxReplicas }}
{{- end }}

{{- if .ControlPlane.CnvrgRouterEnable }}
  cnvrgRouter:
    enabled: {{ .ControlPlane.CnvrgRouterEnable }}
    image: {{ .ControlPlane.CnvrgRouterImage }}
{{- end }}

{{- if .ControlPlane.SmtpServer }}
  smtp:
    server: {{ .ControlPlane.SmtpServer }}
    port: {{ .ControlPlane.SmtpPort }}
    username: {{ .ControlPlane.SmtpUsername }}
    password: {{ .ControlPlane.SmtpPassword }}
    domain: {{ .ControlPlane.SmtpDomain }}
    opensslVerifyMode: {{ .ControlPlane.SmtpOpenSslMode }}
    sender: {{ .ControlPlane.SmtpSender }}
{{- end }}

{{- if eq .ControlPlane.SystemkiqEnable false }}
  systemkiq:
    enabled: {{ .ControlPlane.SystemkiqEnable }}
{{- end }}

{{- if eq .ControlPlane.SystemkiqHpaEnable false }}
    hpa:
      enabled: {{ .ControlPlane.SystemkiqHpaEnable }}
      maxReplicas: {{ .ControlPlane.SystemkiqHpaMaxReplicas }}
{{- end }}

{{- if eq .ControlPlane.WebappEnable false }}
  webapp:
    enabled: {{ .ControlPlane.WebappEnable }}
    svcName: {{ .ControlPlane.WebappSvcName }}
    replicas: {{ .ControlPlane.WebappReplicas }}
{{- end }}

{{- if eq .ControlPlane.WebappHpaEnable false }}
    hpa:
      enabled: {{ .ControlPlane.WebappHpaEnable }}
      maxReplicas: {{ .ControlPlane.WebappHpaMaxReplicas }}
{{- end }}

{{- if eq .ControlPlane.MpiEnable false }}     
  mpi: 
    enabled: {{ .ControlPlane.MpiEnable }}
    image: {{ .ControlPlane.MpiImage }}
    kubectlDeliveryImage: {{ .ControlPlane.MpiKubectlImage }}
    extraArgs: { {{ .ControlPlane.MpiExtraArgs }} }
    registry:
      url: {{ .ControlPlane.MpiRegistryUrl }}
      user: {{ .ControlPlane.MpiRegistryUser }}
      password: {{ .ControlPlane.MpiRegistryPassword }}
{{- end }}

